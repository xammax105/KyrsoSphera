import asyncio
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.fsm.context import FSMContext
import logging
import keyboard as kb
import menu_hand, kyrs_hand,admin
from conf import TOKEN
import func as f
from aiogram.filters import CommandStart
from states import *
from conf import cur, conn

async def main():
    # –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(admin.router)

    dp.include_router(menu_hand.router)
    dp.include_router(kyrs_hand.router)




    # –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    loop = asyncio.get_event_loop()

    await bot.delete_webhook(drop_pending_updates=True)  # –ø—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())


bot = Bot(token=TOKEN)
dp = Dispatcher()


@dp.message(CommandStart())
async def start_command(message: types.Message, state: FSMContext):
    cur.execute("SELECT CASE WHEN EXISTS (SELECT 1 FROM Users WHERE User_id = ?) THEN 1 ELSE 0 END", message.from_user.id)
    in_base_res = cur.fetchone()[0]
    if in_base_res == 0:

        await message.reply(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} üôã‚Äç‚ôÇÔ∏è! –Ø —Ç–≤–æ–π –Ω–æ–≤—ã–π <i>—á–∞—Ç-–±–æ—Ç</i>. "
                         "–ú–µ–Ω—è —Å–æ–∑–¥–∞–ª–∏, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤ –∏–∑—É—á–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫—É—Ä—Å–æ–≤"
                        "—Å –∫–æ–º—Ñ–æ—Ä—Ç–æ–º. –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º!üòâ", parse_mode='HTML',
                        reply_markup=kb.kb_keyboard)
        f.add_user('NUll', 'NUll', message.from_user.username, message.from_user.id, cur, conn)
    elif in_base_res == 1:
        await bot.send_message(message.from_user.id, f"üóÉ –ú–µ–Ω—é:", reply_markup=kb.menu_keyboard)

# –±–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)  # –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(main())

