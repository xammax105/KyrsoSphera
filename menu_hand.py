import json

from aiogram import Bot, Router, types, F
from aiogram.enums import ContentType
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, WebAppInfo, PreCheckoutQuery, LabeledPrice
from aiogram.utils.keyboard import InlineKeyboardBuilder

import func
import func as f
import kyrs_hand
import keyboard as kb
from states import *
import sqlite3
import os
import logging
from conf import TOKEN, admin_token,Pay_token,leter_fisrt
# import functions as f
from conf import cur,conn
# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# —Ä–æ—É—Ç–µ—Ä
router = Router()
bot = Bot(token=TOKEN)



@router.message(F.text.lower() == '–º–µ–Ω—éüìÑ')
async def user(message: types.Message):
    await bot.send_message(message.from_user.id, f"–ú–µ–Ω—é: ", reply_markup=kb.menu_keyboard)


@router.message(F.text.lower() == '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ü•¥')
async def history(message: types.Message):
    photo_maks =  await bot.get_user_profile_photos(989808944, limit=10)
    photo_file_maks = photo_maks.photos[0][-1].file_id


    await bot.send_photo(chat_id=message.from_user.id, photo=photo_file_maks,caption=f"<b>–ú–∞–∫—Å–∏–º –ö–∞–Ω–∏—á–µ–≤</b>\n18 "
                                                                                     f"–≥–æ–¥–∏–∫–æ–≤\n—Å—Ç—É–¥–µ–Ω—Ç –ü–ö "
                                                                                     f"–ë–ì–¢–£\n–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã "
                                                                                     f"<code>2202201367764954</code>",
                         parse_mode='HTML')



@router.callback_query(F.data == 'admin')
async def admin(message: types.Message, state: FSMContext):
    if message.from_user.id == admin_token:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: üîê")
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–∞—Ä–æ–ª–µ–º
        await state.set_state(RasStates.waiting_for_password)
    else:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å <b>–∞–¥–º–∏–Ω–æ–º</b>ü§î", parse_mode='HTML')

    @router.message(RasStates.waiting_for_password)
    async def process_password(message: types.Message, state: FSMContext):
        password = message.text
        if password == "123":  # –ó–∞–º–µ–Ω–∏—Ç–µ "your_password" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—åüí™",
                                   reply_markup=kb.get_admin_keyboard())
        else:
            await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—åüîí")
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é user(message)
            await user(message)
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        await state.clear()


@router.callback_query(F.data == 'profile')
async def profile_command(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = """SELECT COUNT(cp.UserId)
                FROM CourseParticipants cp
                WHERE cp.UserId = (
                    SELECT ID
                    FROM Users
                    WHERE user_id = ?
                )"""
    cur.execute(query, str(message.from_user.id,))
    answers_count = cur.fetchone()[0]
    try:
        photos = await bot.get_user_profile_photos(message.from_user.id, limit=10)
        photo_file = photos.photos[0][-1].file_id
        await bot.send_photo(message.from_user.id, photo_file, caption=f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                                                       f'–ò–º—è: {message.from_user.first_name}\n'
                                                                       f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n'
                                                                        f'–ö—É—Ä—Å–æ–≤: {answers_count}', reply_markup=kb.get_profile_kb(message.from_user.id))

    except Exception as e:
        print(e)
        await bot.send_message(message.from_user.id, f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                                     f'–ò–º—è: {message.from_user.first_name}\n'
                                                     f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n'
                                                     f'–ö—É—Ä—Å–æ–≤: {answers_count}', reply_markup=kb.get_profile_kb(message.from_user.id))
@router.callback_query(lambda c: c.data.startswith('my_subscriptions_'))
async def process_delete_callback(callback_query: types.CallbackQuery, state: FSMContext):
    cont_1 = callback_query.data.split('_')[2]
    cur.execute("""SELECT Id,Name, Description,Web, Cost
        FROM Courses
        WHERE Id IN (
            SELECT cp.CourseID
            FROM CourseParticipants cp
            WHERE cp.UserId = (
            SELECT ID
            FROM Users
            WHERE user_id = ?))""", str(cont_1,))
    res = cur.fetchall()

    # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ–≥—É
    instructions = res

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if instructions:
        for instruction in instructions:
            answer = [
                [
                   types.InlineKeyboardButton(text="üìë –û—Ç–∑—ã–≤—ã",
                                               callback_data=f"AddReview_{instruction[0]}"),
                    types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data=f"Menu")
                ]
            ]

            keyboard_user_kyrs = types.InlineKeyboardMarkup(inline_keyboard=answer, resize_keyboard=True)
            await bot.send_message(callback_query.from_user.id,f"–ù–∞–π–¥–µ–Ω –∫—É—Ä—Å:\n"
                                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {instruction[1]}\n"
                                f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {instruction[2]}\n"
                                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {instruction[4]}", reply_markup=keyboard_user_kyrs)


@router.callback_query(F.data == 'instructions')
async def instructions(message: types.Message):
    await bot.send_message(message.from_user.id, f"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=kb.keyboard_inst)


@router.callback_query(F.data == 'top')
async def Top(callback_query: types.CallbackQuery):
    # –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∞–º–æ–º –ø–æ–ø—É–ª—è—Ä–Ω–æ–º –∫—É—Ä—Å–µ
    top_course_info = cur.execute("""
        SELECT c.*, cp.UserCount
        FROM Courses c
        JOIN (
            SELECT TOP 1 CourseId, COUNT(UserId) AS UserCount
            FROM CourseParticipants
            GROUP BY CourseId
            ORDER BY UserCount DESC
        ) cp ON c.ID = cp.CourseId
    """)
    # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫—É—Ä—Å–µ

    for course_info in top_course_info:
        id,name, description,wed, price, user_count = course_info

        answer = [
            [
                types.InlineKeyboardButton(text="‚úâ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"reply_{id}"),
                types.InlineKeyboardButton(text="üìë –û—Ç–∑—ã–≤—ã",
                                           callback_data=f"viewAnswer_{id}"),
            ]
        ]
        keyboard_answer = types.InlineKeyboardMarkup(inline_keyboard=answer, resize_keyboard=True,
                                                     input_field_placeholder="–¢—ã –∫–µ–º –±—É–¥–µ—à—å, –≤–∞—Ü–æ–∫")

    await bot.send_message(callback_query.message.chat.id,
                           f"<b>üèÜ –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –∫—É—Ä—Å</b> {name}\n{description}\n–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} —Ä—É–±.\n–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {user_count}",
                           reply_markup=keyboard_answer, parse_mode="HTML")


@router.callback_query(lambda c: c.data.startswith('AddReview_'))
async def process_add_rewiev(callback_query: types.CallbackQuery, state: FSMContext):
    cont_1 = callback_query.data.split('_')[1]
    await bot.send_message(callback_query.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –Ω–∞ –∫—É—Ä—Å:')
    await state.set_state(RasStates.AddRewievState)

    @router.message(RasStates.AddRewievState)
    async def cost(message: types.Message, state: FSMContext):
        rewiew = message.text
        cur.execute("""INSERT INTO Review (Review, Id_cours) VALUES (?, ?)""", (rewiew,cont_1))
        conn.commit()
        await bot.send_message(callback_query.from_user.id,"–û—Ç–∑—ã–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω")
        state.clear()

@router.callback_query(lambda c: c.data.startswith('reply_'))
async def process_reply(callback_query: types.CallbackQuery, state: FSMContext):
    cont_1 = callback_query.data.split('_')[1]
    web_app = WebAppInfo(url="https://xammax105.github.io/")

    buttons = [
        [types.KeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",web_app=web_app)]
    ]
    conf = types.ReplyKeyboardMarkup(keyboard=buttons,
                                         resize_keyboard=True)
    await bot.send_message(callback_query.from_user.id, f'–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–µ–¥–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É\n'
                                                        f'<b>–î–∞–Ω–Ω—É—é —Ü–∏—Ñ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ —Ñ–æ—Ä–º–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –∫—É—Ä—Å</b> <code>{cont_1}</code>:',parse_mode='html', reply_markup=conf)
message_data = {}


@router.message(F.web_app_data)
async def web_app_data_handler(message: types.Message):
    data = message.web_app_data.data
    await message.answer(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ Web App: {data}", reply_markup=kb.kb_keyboard)
    print(data)

    data = json.loads(data)

    cur.execute(f"Select Name, Cost From Courses Where Id = {data['number']}")
    row = cur.fetchone()

    func.send_email_notification(data,leter_fisrt)
    message_data[message.chat.id] = data
    if row:
        name, cost = row
        PRICE = LabeledPrice(label=name, amount=int(cost) * 100)  # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ LabeledPrice
        print(PRICE)  # –ü–µ—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    else:
        print("–ö—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await message.answer("–ö—É—Ä—Å —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º Id –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await bot.send_invoice(message.chat.id,
                           title=f"–û–ø–ª–∞—Ç–∞ –∫—É—Ä—Å–∞",
                           description=f"–û–ø–ª–∞—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ {name}",
                           provider_token=Pay_token,
                           currency="RUB",
                           photo_url="https://www.aroged.com/wp-content/uploads/2022/06/Telegram-has-a-premium-subscription.jpg",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           need_email=True,
                           need_phone_number=True,
                           prices=[PRICE],
                           start_parameter="start_kyrs",
                           payload='one more kyrs'
                           )

@router.pre_checkout_query()
async def pre_checkout_query(pre_checkout_query: PreCheckoutQuery, bot: Bot):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@router.message(F.successful_payment)
async def successful_payment(message: types.Message):
    #–¥–æ—Å—Ç–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É
    data = message_data.get(message.chat.id)
    payment_info = message.successful_payment

    with conn.cursor() as cur:
        # Fetch the course name
        cur.execute(f"SELECT Name FROM Courses WHERE Id = ?", (data['number'],))
        row = cur.fetchone()
        if row:
            course_name = row[0]
            await message.answer(
                f'–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –∫—É—Ä—Å–∞ {course_name} —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É. \n–í –±–ª–∏–∂–∞–π—â–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞!')
        else:
            await message.answer('–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

    with conn.cursor() as cur:
        # Fetch the user ID
        cur.execute(f"SELECT ID FROM Users WHERE User_id = ?", (message.from_user.id,))
        row = cur.fetchone()
        if row:
            id_user = row[0]
            print(id_user, "UserIDDDDDDDDDDDDDDDDDDDDDDDDDDD")
        else:
            await message.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.')
            return

    with conn.cursor() as cur:
        # Insert into CourseParticipants
        cur.execute("INSERT INTO CourseParticipants (UserID, CourseID) VALUES (?, ?)", (id_user, data['number']))
        conn.commit()

    body = f"""
       –£–≤–∞–∂–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,

       –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É –∫—É—Ä—Å–∞ {course_name}!

    –î–µ—Ç–∞–ª–∏ –æ–ø–ª–∞—Ç—ã:
    - –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞: {course_name}
    - –°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã: {payment_info.total_amount / 100} {payment_info.currency}
    - –ò–º—è –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {message.from_user.username}
    - Email –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {payment_info.order_info.email if payment_info.order_info else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
    - –¢–µ–ª–µ—Ñ–æ–Ω –ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞: {payment_info.order_info.phone_number if payment_info.order_info else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}


       –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É. –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø–ª–æ—â–∞–¥–∫–∞.

       –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
       –í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ KyrsoSphera
       """

    func.send_email_notification(data, body)

    print(message_data)



