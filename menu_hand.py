
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import func as f

import keyboard as kb
from states import *
import sqlite3
import os
import logging
from conf import TOKEN, admin_token
# import functions as f
from conf import cur,conn
# –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö

# —Ä–æ—É—Ç–µ—Ä
router = Router()
bot = Bot(token=TOKEN)


@router.message(F.text.lower() == '–º–µ–Ω—éüìÑ')
async def user(message: types.Message):
    await bot.send_message(message.from_user.id, f"–ú–µ–Ω—é: ", reply_markup=kb.menu_keyboard)


@router.message(F.text.lower() == '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ü•¥')
async def history(message: types.Message):
    photo_maks =  await bot.get_user_profile_photos(989808944, limit=10)
    photo_file_maks = photo_maks.photos[0][-1].file_id


    await bot.send_photo(chat_id=message.from_user.id, photo=photo_file_maks,caption=f"<b>–ú–∞–∫—Å–∏–º –ö–∞–Ω–∏—á–µ–≤</b>\n18 "
                                                                                     f"–≥–æ–¥–∏–∫–æ–≤\n—Å—Ç—É–¥–µ–Ω—Ç –ü–ö "
                                                                                     f"–ë–ì–¢–£\n–Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã "
                                                                                     f"<code>2202201367764954</code>",
                         parse_mode='HTML')



@router.callback_query(F.data == 'admin')
async def admin(message: types.Message, state: FSMContext):
    if message.from_user.id == admin_token:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: üîê")
        # –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç —Å –ø–∞—Ä–æ–ª–µ–º
        await state.set_state(RasStates.waiting_for_password)
    else:
        await bot.send_message(message.from_user.id, "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å <b>–∞–¥–º–∏–Ω–æ–º</b>ü§î", parse_mode='HTML')

    @router.message(RasStates.waiting_for_password)
    async def process_password(message: types.Message, state: FSMContext):
        password = message.text
        if password == "123":  # –ó–∞–º–µ–Ω–∏—Ç–µ "your_password" –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
            await bot.send_message(message.from_user.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—åüí™",
                                   reply_markup=kb.get_admin_keyboard())
        else:
            await bot.send_message(message.from_user.id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—åüîí")
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é user(message)
            await user(message)
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
        await state.clear()


@router.callback_query(F.data == 'profile')
async def profile_command(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    query = """SELECT COUNT(cp.UserId)
                FROM CourseParticipants cp
                WHERE cp.UserId = (
                    SELECT ID
                    FROM Users
                    WHERE user_id = ?
                )"""
    cur.execute(query, str(message.from_user.id,))
    answers_count = cur.fetchone()[0]
    try:
        photos = await bot.get_user_profile_photos(message.from_user.id, limit=10)
        photo_file = photos.photos[0][-1].file_id
        await bot.send_photo(message.from_user.id, photo_file, caption=f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                                                       f'–ò–º—è: {message.from_user.first_name}\n'
                                                                       f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n'
                                                                        f'–ö—É—Ä—Å–æ–≤: {answers_count}'
                             )
    except Exception as e:
        print(e)
        await bot.send_message(message.from_user.id, f'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n'
                                                     f'–ò–º—è: {message.from_user.first_name}\n'
                                                     f'–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}\n\n'
                                                     f'–ö—É—Ä—Å–æ–≤: {answers_count}'

                               )

@router.callback_query(F.data == 'instructions')
async def instructions(message: types.Message):
    await bot.send_message(message.from_user.id, f"üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏", reply_markup=kb.keyboard_inst)


@router.callback_query(F.data == 'top')
async def Top(callback_query: types.CallbackQuery):
    # –±–µ—Ä–µ–º —Ç–æ–ø –ø–æ –∏–Ω—Ç—Å—Ä—É–∫—Ü–∏—è–º
    users_instructions = f.get_users_instructions_count(cur)
    # —Ç–æ–ø –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º
    inst_keyboard = InlineKeyboardBuilder()
    for user_id, num_instructions in users_instructions:
        user = await bot.get_chat(user_id)
        username = user.username
        button = types.InlineKeyboardButton(text=f"@{username} - {num_instructions} –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π",
                                            callback_data=f"user_{user_id}")
        inst_keyboard.row(button)
    await bot.send_message(callback_query.message.chat.id,
                               "üèÜ –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º:",
                               reply_markup=inst_keyboard.as_markup())



