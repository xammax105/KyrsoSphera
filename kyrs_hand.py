
from aiogram import Bot, Router, types, F
from aiogram.fsm.context import FSMContext

import keyboard as kb
from states import *
import sqlite3
import os
import logging
from conf import TOKEN
import func as f
import re
#
from conf import cur,conn

#
# —Ä–æ—É—Ç–µ—Ä
router = Router()
bot = Bot(token=TOKEN)




@router.callback_query(lambda a: a.data == 'search')
async def search_for_tags(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "üîé –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫—É—Ä—Å—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –µ–≥–æ:")
    await state.set_state(RasStates.waiting_for_tag_search)

    @router.message(RasStates.waiting_for_tag_search)
    async def search_tags(message: types.Message, state: FSMContext):
        tag = message.text


        if tag[0] == "#":
            tag = tag[1:]

        cur.execute(f"SELECT * FROM Courses WHERE Description LIKE '%{tag}%' ")
        res = cur.fetchall()

        # –ò—â–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ç–µ–≥—É
        instructions = res

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if instructions:
            for instruction in instructions:
                answer = [
                    [
                        types.InlineKeyboardButton(text=f"‚úâ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"reply_{instruction[0]}"),
                        types.InlineKeyboardButton(text="üìë –û—Ç–∑—ã–≤—ã",
                                                   callback_data=f"viewAnswer_{instruction[0]}"),
                        types.InlineKeyboardButton(text="–ú–µ–Ω—é", callback_data=f"Menu")
                    ]
                ]

                keyboard_answer = types.InlineKeyboardMarkup(inline_keyboard=answer, resize_keyboard=True)
                await message.reply(f"–ù–∞–π–¥–µ–Ω –∫—É—Ä—Å:\n"
                                    f"–ù–∞–∑–≤–∞–Ω–∏–µ: {instruction[1]}\n"
                                    f"–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ: {instruction[2]}\n"
                                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {instruction[4]}", reply_markup=keyboard_answer)
        else:
            await message.reply("–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",reply_markup=kb.menu_keyboard)
        await state.clear()


instructions_data = {}

# –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
@router.callback_query(lambda a: a.data == 'view_instructions')
async def to_sort_callback(message: types.Message, state: FSMContext):
    sort_kb = [

        [
            types.InlineKeyboardButton(text='üë• –í–µ—Å—å —Å–ø–∏—Å–æ–∫', callback_data='View'),
            types.InlineKeyboardButton(text='üÜï –î–µ—à–µ–≤—ã–µ', callback_data='Date'),
        ]

    ]

    keyboard_sord = types.InlineKeyboardMarkup(inline_keyboard=sort_kb,
                                               resize_keyboard=True,
                                               input_field_placeholder="–§–∏–ª—å—Ç—Ä"
                                               )

    await bot.send_message(message.from_user.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –≤—ã–≤–æ–¥–∞ –∫—É—Ä—Å–æ–≤üìã", reply_markup=keyboard_sord)

@router.callback_query(F.data == 'Menu')
async def menu(message: types.Message, state: FSMContext):
    await bot.send_message(message.from_user.id, "üìÑ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º –ø–æ–¥—Ö–æ–¥–∏—Ç:",
                           reply_markup=kb.menu_keyboard)


@router.callback_query(F.data == 'Date')
async def date_sort(message: types.Message):
    cur.execute("""
                    SELECT * FROM Courses
                    ORDER BY Cost ASC;
                """)
    all_instructions = cur.fetchall()

    index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    instructions_data[message.from_user.id] = {'index': index, 'all_instructions': all_instructions}

    await send_next_instruction(message.from_user.id)


async def send_next_instruction(user_id):
    user_data = instructions_data.get(user_id)
    if user_data:
        index = user_data.get('index')
        all_instructions = user_data.get('all_instructions')
        print(all_instructions)
        if index < len(all_instructions):
            instruction = all_instructions[index]
            print(instruction, '289--------------------------------------------------------')
            instruction_id,Name, Description, Web, Cost = instruction
            user = await bot.get_chat(user_id)
            username = user.username

            answer = [
                [
                    types.InlineKeyboardButton(text="‚úâ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data=f"reply_{instruction_id}"),
                    types.InlineKeyboardButton(text="üìë –û—Ç–∑—ã–≤—ã",
                                               callback_data=f"viewAnswer_{instruction_id}"),
                    types.InlineKeyboardButton(text="‚û° –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")
                ]
            ]
            keyboard_answer = types.InlineKeyboardMarkup(inline_keyboard=answer, resize_keyboard=True,
                                                         input_field_placeholder="–¢—ã –∫–µ–º –±—É–¥–µ—à—å, –≤–∞—Ü–æ–∫")
            await bot.send_message(user_id,
                                       f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {Name}\n–û–ø–∏—Å–∞–Ω–∏–µ:  <code>{Description}</code>\n–°—Ç–æ–∏—Å–º–æ—Ç—å <i>{Cost}</i>",
                                       reply_markup=keyboard_answer,parse_mode='html')
        else:
            await bot.send_message(user_id, "ü´° –í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")
    else:
        await bot.send_message(user_id, "–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")


@router.callback_query(F.data == 'View')
async def view_instructions(message: types.Message):
    cur.execute("""
                    SELECT * FROM Courses
            """)
    all_instructions = cur.fetchall()
    index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    instructions_data[message.from_user.id] = {'index': index, 'all_instructions': all_instructions}
    await send_next_instruction(message.from_user.id)



@router.callback_query(lambda a: a.data == 'skip')
async def skip_instruction(message: types.Message):
    user_id = message.from_user.id

    user_data = instructions_data.get(user_id)
    if user_data:
        index = user_data.get('index')
        instructions_data[user_id]['index'] = index + 1

        await send_next_instruction(user_id)
    else:
        await bot.send_message(user_id, "–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.")

@router.callback_query(lambda c: c.data.startswith('viewAnswer_'))
async def process_add_rewiev(callback_query: types.CallbackQuery, state: FSMContext):
    cont_1 = callback_query.data.split('_')[1]
    cur.execute("SELECT * FROM Review WHERE Id_cours=?", (cont_1,))
    res = cur.fetchall()
    if len(res) > 0:
        for review in res:
            formatted_review = f"<b>–û—Ç–∑—ã–≤:</b> {review[0]}"
            await bot.send_message(callback_query.from_user.id, formatted_review, parse_mode="HTML")
    else:
        await bot.send_message(callback_query.from_user.id, "–¢—É—Ç –Ω–µ—Ç –æ—Ç–∑—ã–≤–æ–≤")




